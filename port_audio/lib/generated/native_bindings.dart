// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void port_audio_native_initialize(
    ffi.Pointer<ffi.Void> dartApiData,
  ) {
    return _port_audio_native_initialize(
      dartApiData,
    );
  }

  late final _port_audio_native_initialize_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_initialize>>(
          'port_audio_native_initialize');
  late final _dart_port_audio_native_initialize _port_audio_native_initialize =
      _port_audio_native_initialize_ptr
          .asFunction<_dart_port_audio_native_initialize>();

  void port_audio_native_terminate() {
    return _port_audio_native_terminate();
  }

  late final _port_audio_native_terminate_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_terminate>>(
          'port_audio_native_terminate');
  late final _dart_port_audio_native_terminate _port_audio_native_terminate =
      _port_audio_native_terminate_ptr
          .asFunction<_dart_port_audio_native_terminate>();

  ffi.Pointer<NativeAudioDeviceInfo>
      port_audio_native_get_default_input_device() {
    return _port_audio_native_get_default_input_device();
  }

  late final _port_audio_native_get_default_input_device_ptr = _lookup<
          ffi.NativeFunction<_c_port_audio_native_get_default_input_device>>(
      'port_audio_native_get_default_input_device');
  late final _dart_port_audio_native_get_default_input_device
      _port_audio_native_get_default_input_device =
      _port_audio_native_get_default_input_device_ptr
          .asFunction<_dart_port_audio_native_get_default_input_device>();

  ffi.Pointer<NativeAudioDeviceInfo>
      port_audio_native_get_default_output_device() {
    return _port_audio_native_get_default_output_device();
  }

  late final _port_audio_native_get_default_output_device_ptr = _lookup<
          ffi.NativeFunction<_c_port_audio_native_get_default_output_device>>(
      'port_audio_native_get_default_output_device');
  late final _dart_port_audio_native_get_default_output_device
      _port_audio_native_get_default_output_device =
      _port_audio_native_get_default_output_device_ptr
          .asFunction<_dart_port_audio_native_get_default_output_device>();

  ffi.Pointer<NativeAudioDeviceInfoList>
      port_audio_native_get_input_device_list() {
    return _port_audio_native_get_input_device_list();
  }

  late final _port_audio_native_get_input_device_list_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_get_input_device_list>>(
          'port_audio_native_get_input_device_list');
  late final _dart_port_audio_native_get_input_device_list
      _port_audio_native_get_input_device_list =
      _port_audio_native_get_input_device_list_ptr
          .asFunction<_dart_port_audio_native_get_input_device_list>();

  ffi.Pointer<NativeAudioDeviceInfoList>
      port_audio_native_get_output_device_list() {
    return _port_audio_native_get_output_device_list();
  }

  late final _port_audio_native_get_output_device_list_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_get_output_device_list>>(
          'port_audio_native_get_output_device_list');
  late final _dart_port_audio_native_get_output_device_list
      _port_audio_native_get_output_device_list =
      _port_audio_native_get_output_device_list_ptr
          .asFunction<_dart_port_audio_native_get_output_device_list>();

  void port_audio_native_destroy_device_info(
    ffi.Pointer<NativeAudioDeviceInfo> info,
  ) {
    return _port_audio_native_destroy_device_info(
      info,
    );
  }

  late final _port_audio_native_destroy_device_info_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_destroy_device_info>>(
          'port_audio_native_destroy_device_info');
  late final _dart_port_audio_native_destroy_device_info
      _port_audio_native_destroy_device_info =
      _port_audio_native_destroy_device_info_ptr
          .asFunction<_dart_port_audio_native_destroy_device_info>();

  void port_audio_native_destroy_device_info_list(
    ffi.Pointer<NativeAudioDeviceInfoList> list,
  ) {
    return _port_audio_native_destroy_device_info_list(
      list,
    );
  }

  late final _port_audio_native_destroy_device_info_list_ptr = _lookup<
          ffi.NativeFunction<_c_port_audio_native_destroy_device_info_list>>(
      'port_audio_native_destroy_device_info_list');
  late final _dart_port_audio_native_destroy_device_info_list
      _port_audio_native_destroy_device_info_list =
      _port_audio_native_destroy_device_info_list_ptr
          .asFunction<_dart_port_audio_native_destroy_device_info_list>();

  ffi.Pointer<NativeAudioStream> port_audio_native_create_input_stream(
    int deviceIndex,
    int nativePort,
    int channelCount,
    int sample_format,
    double sample_rate,
    int frame_count_per_buffer,
  ) {
    return _port_audio_native_create_input_stream(
      deviceIndex,
      nativePort,
      channelCount,
      sample_format,
      sample_rate,
      frame_count_per_buffer,
    );
  }

  late final _port_audio_native_create_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_create_input_stream>>(
          'port_audio_native_create_input_stream');
  late final _dart_port_audio_native_create_input_stream
      _port_audio_native_create_input_stream =
      _port_audio_native_create_input_stream_ptr
          .asFunction<_dart_port_audio_native_create_input_stream>();

  void port_audio_native_start_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
  ) {
    return _port_audio_native_start_input_stream(
      nativeStream,
    );
  }

  late final _port_audio_native_start_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_start_input_stream>>(
          'port_audio_native_start_input_stream');
  late final _dart_port_audio_native_start_input_stream
      _port_audio_native_start_input_stream =
      _port_audio_native_start_input_stream_ptr
          .asFunction<_dart_port_audio_native_start_input_stream>();

  void port_audio_native_stop_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
  ) {
    return _port_audio_native_stop_input_stream(
      nativeStream,
    );
  }

  late final _port_audio_native_stop_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_stop_input_stream>>(
          'port_audio_native_stop_input_stream');
  late final _dart_port_audio_native_stop_input_stream
      _port_audio_native_stop_input_stream =
      _port_audio_native_stop_input_stream_ptr
          .asFunction<_dart_port_audio_native_stop_input_stream>();

  void port_audio_native_abort_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
  ) {
    return _port_audio_native_abort_input_stream(
      nativeStream,
    );
  }

  late final _port_audio_native_abort_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_abort_input_stream>>(
          'port_audio_native_abort_input_stream');
  late final _dart_port_audio_native_abort_input_stream
      _port_audio_native_abort_input_stream =
      _port_audio_native_abort_input_stream_ptr
          .asFunction<_dart_port_audio_native_abort_input_stream>();

  void port_audio_native_destroy_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
  ) {
    return _port_audio_native_destroy_input_stream(
      nativeStream,
    );
  }

  late final _port_audio_native_destroy_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_destroy_input_stream>>(
          'port_audio_native_destroy_input_stream');
  late final _dart_port_audio_native_destroy_input_stream
      _port_audio_native_destroy_input_stream =
      _port_audio_native_destroy_input_stream_ptr
          .asFunction<_dart_port_audio_native_destroy_input_stream>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Int64()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Int8> __opaque;
}

class NativeAudioDeviceInfo extends ffi.Struct {
  @ffi.Int32()
  external int deviceIndex;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int maxInputChannelCount;

  @ffi.Int32()
  external int maxOutputChannelCount;

  @ffi.Double()
  external double defaultSamplingRate;
}

class NativeAudioDeviceInfoList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<NativeAudioDeviceInfo>> list;

  @ffi.Int32()
  external int count;
}

class NativeAudioStream extends ffi.Struct {
  external ffi.Pointer<ffi.Void> stream;

  @ffi.Int32()
  external int deviceIndex;

  @ffi.Int64()
  external int nativePort;

  @ffi.Int32()
  external int channelCount;

  @ffi.Int32()
  external int sampleFormat;

  @ffi.Int32()
  external int frameCountPerBuffer;

  @ffi.Double()
  external double sample_rate;
}

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SAMPLE_FORMAT_INT16 = 0;

const int SAMPLE_FORMAT_FLOAT32 = 1;

typedef _c_port_audio_native_initialize = ffi.Void Function(
  ffi.Pointer<ffi.Void> dartApiData,
);

typedef _dart_port_audio_native_initialize = void Function(
  ffi.Pointer<ffi.Void> dartApiData,
);

typedef _c_port_audio_native_terminate = ffi.Void Function();

typedef _dart_port_audio_native_terminate = void Function();

typedef _c_port_audio_native_get_default_input_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _dart_port_audio_native_get_default_input_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _c_port_audio_native_get_default_output_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _dart_port_audio_native_get_default_output_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _c_port_audio_native_get_input_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _dart_port_audio_native_get_input_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _c_port_audio_native_get_output_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _dart_port_audio_native_get_output_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _c_port_audio_native_destroy_device_info = ffi.Void Function(
  ffi.Pointer<NativeAudioDeviceInfo> info,
);

typedef _dart_port_audio_native_destroy_device_info = void Function(
  ffi.Pointer<NativeAudioDeviceInfo> info,
);

typedef _c_port_audio_native_destroy_device_info_list = ffi.Void Function(
  ffi.Pointer<NativeAudioDeviceInfoList> list,
);

typedef _dart_port_audio_native_destroy_device_info_list = void Function(
  ffi.Pointer<NativeAudioDeviceInfoList> list,
);

typedef _c_port_audio_native_create_input_stream
    = ffi.Pointer<NativeAudioStream> Function(
  ffi.Int32 deviceIndex,
  ffi.Int64 nativePort,
  ffi.Int32 channelCount,
  ffi.Int32 sample_format,
  ffi.Double sample_rate,
  ffi.Int32 frame_count_per_buffer,
);

typedef _dart_port_audio_native_create_input_stream
    = ffi.Pointer<NativeAudioStream> Function(
  int deviceIndex,
  int nativePort,
  int channelCount,
  int sample_format,
  double sample_rate,
  int frame_count_per_buffer,
);

typedef _c_port_audio_native_start_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _dart_port_audio_native_start_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _c_port_audio_native_stop_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _dart_port_audio_native_stop_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _c_port_audio_native_abort_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _dart_port_audio_native_abort_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _c_port_audio_native_destroy_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _dart_port_audio_native_destroy_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
