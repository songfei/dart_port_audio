// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_start_ptr =
      _lookup<ffi.NativeFunction<_c___va_start>>('__va_start');
  late final _dart___va_start ___va_start =
      ___va_start_ptr.asFunction<_dart___va_start>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_init_cookie>>(
          '__security_init_cookie');
  late final _dart___security_init_cookie ___security_init_cookie =
      ___security_init_cookie_ptr.asFunction<_dart___security_init_cookie>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookie_ptr =
      _lookup<ffi.NativeFunction<_c___security_check_cookie>>(
          '__security_check_cookie');
  late final _dart___security_check_cookie ___security_check_cookie =
      ___security_check_cookie_ptr.asFunction<_dart___security_check_cookie>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailure_ptr =
      _lookup<ffi.NativeFunction<_c___report_gsfailure>>('__report_gsfailure');
  late final _dart___report_gsfailure ___report_gsfailure =
      ___report_gsfailure_ptr.asFunction<_dart___report_gsfailure>();

  late final ffi.Pointer<ffi.Uint64> ___security_cookie =
      _lookup<ffi.Uint64>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void port_audio_native_initialize(
    ffi.Pointer<ffi.Void> dartApiData,
    int callbackPort,
  ) {
    return _port_audio_native_initialize(
      dartApiData,
      callbackPort,
    );
  }

  late final _port_audio_native_initialize_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_initialize>>(
          'port_audio_native_initialize');
  late final _dart_port_audio_native_initialize _port_audio_native_initialize =
      _port_audio_native_initialize_ptr
          .asFunction<_dart_port_audio_native_initialize>();

  void port_audio_native_terminate() {
    return _port_audio_native_terminate();
  }

  late final _port_audio_native_terminate_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_terminate>>(
          'port_audio_native_terminate');
  late final _dart_port_audio_native_terminate _port_audio_native_terminate =
      _port_audio_native_terminate_ptr
          .asFunction<_dart_port_audio_native_terminate>();

  ffi.Pointer<NativeAudioDeviceInfo>
      port_audio_native_get_default_input_device() {
    return _port_audio_native_get_default_input_device();
  }

  late final _port_audio_native_get_default_input_device_ptr = _lookup<
          ffi.NativeFunction<_c_port_audio_native_get_default_input_device>>(
      'port_audio_native_get_default_input_device');
  late final _dart_port_audio_native_get_default_input_device
      _port_audio_native_get_default_input_device =
      _port_audio_native_get_default_input_device_ptr
          .asFunction<_dart_port_audio_native_get_default_input_device>();

  ffi.Pointer<NativeAudioDeviceInfo>
      port_audio_native_get_default_output_device() {
    return _port_audio_native_get_default_output_device();
  }

  late final _port_audio_native_get_default_output_device_ptr = _lookup<
          ffi.NativeFunction<_c_port_audio_native_get_default_output_device>>(
      'port_audio_native_get_default_output_device');
  late final _dart_port_audio_native_get_default_output_device
      _port_audio_native_get_default_output_device =
      _port_audio_native_get_default_output_device_ptr
          .asFunction<_dart_port_audio_native_get_default_output_device>();

  ffi.Pointer<NativeAudioDeviceInfoList>
      port_audio_native_get_input_device_list() {
    return _port_audio_native_get_input_device_list();
  }

  late final _port_audio_native_get_input_device_list_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_get_input_device_list>>(
          'port_audio_native_get_input_device_list');
  late final _dart_port_audio_native_get_input_device_list
      _port_audio_native_get_input_device_list =
      _port_audio_native_get_input_device_list_ptr
          .asFunction<_dart_port_audio_native_get_input_device_list>();

  ffi.Pointer<NativeAudioDeviceInfoList>
      port_audio_native_get_output_device_list() {
    return _port_audio_native_get_output_device_list();
  }

  late final _port_audio_native_get_output_device_list_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_get_output_device_list>>(
          'port_audio_native_get_output_device_list');
  late final _dart_port_audio_native_get_output_device_list
      _port_audio_native_get_output_device_list =
      _port_audio_native_get_output_device_list_ptr
          .asFunction<_dart_port_audio_native_get_output_device_list>();

  void port_audio_native_destroy_device_info(
    ffi.Pointer<NativeAudioDeviceInfo> info,
  ) {
    return _port_audio_native_destroy_device_info(
      info,
    );
  }

  late final _port_audio_native_destroy_device_info_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_destroy_device_info>>(
          'port_audio_native_destroy_device_info');
  late final _dart_port_audio_native_destroy_device_info
      _port_audio_native_destroy_device_info =
      _port_audio_native_destroy_device_info_ptr
          .asFunction<_dart_port_audio_native_destroy_device_info>();

  void port_audio_native_destroy_device_info_list(
    ffi.Pointer<NativeAudioDeviceInfoList> list,
  ) {
    return _port_audio_native_destroy_device_info_list(
      list,
    );
  }

  late final _port_audio_native_destroy_device_info_list_ptr = _lookup<
          ffi.NativeFunction<_c_port_audio_native_destroy_device_info_list>>(
      'port_audio_native_destroy_device_info_list');
  late final _dart_port_audio_native_destroy_device_info_list
      _port_audio_native_destroy_device_info_list =
      _port_audio_native_destroy_device_info_list_ptr
          .asFunction<_dart_port_audio_native_destroy_device_info_list>();

  void port_audio_native_callback(
    int type,
    ffi.Pointer<ffi.Int8> callbackId,
    int code,
    ffi.Pointer<ffi.Void> result,
  ) {
    return _port_audio_native_callback(
      type,
      callbackId,
      code,
      result,
    );
  }

  late final _port_audio_native_callback_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_callback>>(
          'port_audio_native_callback');
  late final _dart_port_audio_native_callback _port_audio_native_callback =
      _port_audio_native_callback_ptr
          .asFunction<_dart_port_audio_native_callback>();

  void port_audio_native_create_input_stream(
    int deviceIndex,
    int nativePort,
    int channelCount,
    int sampleFormat,
    double sampleRate,
    int frameCountPerBuffer,
    ffi.Pointer<ffi.Int8> callbackId,
  ) {
    return _port_audio_native_create_input_stream(
      deviceIndex,
      nativePort,
      channelCount,
      sampleFormat,
      sampleRate,
      frameCountPerBuffer,
      callbackId,
    );
  }

  late final _port_audio_native_create_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_create_input_stream>>(
          'port_audio_native_create_input_stream');
  late final _dart_port_audio_native_create_input_stream
      _port_audio_native_create_input_stream =
      _port_audio_native_create_input_stream_ptr
          .asFunction<_dart_port_audio_native_create_input_stream>();

  void port_audio_native_start_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
    ffi.Pointer<ffi.Int8> callbackId,
  ) {
    return _port_audio_native_start_input_stream(
      nativeStream,
      callbackId,
    );
  }

  late final _port_audio_native_start_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_start_input_stream>>(
          'port_audio_native_start_input_stream');
  late final _dart_port_audio_native_start_input_stream
      _port_audio_native_start_input_stream =
      _port_audio_native_start_input_stream_ptr
          .asFunction<_dart_port_audio_native_start_input_stream>();

  void port_audio_native_stop_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
    ffi.Pointer<ffi.Int8> callbackId,
  ) {
    return _port_audio_native_stop_input_stream(
      nativeStream,
      callbackId,
    );
  }

  late final _port_audio_native_stop_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_stop_input_stream>>(
          'port_audio_native_stop_input_stream');
  late final _dart_port_audio_native_stop_input_stream
      _port_audio_native_stop_input_stream =
      _port_audio_native_stop_input_stream_ptr
          .asFunction<_dart_port_audio_native_stop_input_stream>();

  void port_audio_native_abort_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
    ffi.Pointer<ffi.Int8> callbackId,
  ) {
    return _port_audio_native_abort_input_stream(
      nativeStream,
      callbackId,
    );
  }

  late final _port_audio_native_abort_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_abort_input_stream>>(
          'port_audio_native_abort_input_stream');
  late final _dart_port_audio_native_abort_input_stream
      _port_audio_native_abort_input_stream =
      _port_audio_native_abort_input_stream_ptr
          .asFunction<_dart_port_audio_native_abort_input_stream>();

  void port_audio_native_destroy_input_stream(
    ffi.Pointer<NativeAudioStream> nativeStream,
    ffi.Pointer<ffi.Int8> callbackId,
  ) {
    return _port_audio_native_destroy_input_stream(
      nativeStream,
      callbackId,
    );
  }

  late final _port_audio_native_destroy_input_stream_ptr =
      _lookup<ffi.NativeFunction<_c_port_audio_native_destroy_input_stream>>(
          'port_audio_native_destroy_input_stream');
  late final _dart_port_audio_native_destroy_input_stream
      _port_audio_native_destroy_input_stream =
      _port_audio_native_destroy_input_stream_ptr
          .asFunction<_dart_port_audio_native_destroy_input_stream>();
}

class NativeAudioDeviceInfo extends ffi.Struct {
  @ffi.Int32()
  external int deviceIndex;

  external ffi.Pointer<ffi.Int8> name;

  @ffi.Int32()
  external int maxInputChannelCount;

  @ffi.Int32()
  external int maxOutputChannelCount;

  @ffi.Double()
  external double defaultSamplingRate;
}

class NativeAudioDeviceInfoList extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<NativeAudioDeviceInfo>> list;

  @ffi.Int32()
  external int count;
}

abstract class NativeCallbackType {
  static const int native_callback_type_create_input_stream = 1;
  static const int native_callback_type_start_input_stream = 2;
  static const int native_callback_type_stop_input_stream = 3;
  static const int native_callback_type_abort_input_stream = 4;
  static const int native_callback_type_destroy_input_stream = 5;
}

class NativeAudioStream extends ffi.Struct {
  external ffi.Pointer<ffi.Void> stream;

  @ffi.Int32()
  external int deviceIndex;

  @ffi.Int64()
  external int nativePort;

  @ffi.Int32()
  external int channelCount;

  @ffi.Int32()
  external int sampleFormat;

  @ffi.Int32()
  external int frameCountPerBuffer;

  @ffi.Double()
  external double sampleRate;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int SAMPLE_FORMAT_INT16 = 0;

const int SAMPLE_FORMAT_FLOAT32 = 1;

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c_port_audio_native_initialize = ffi.Void Function(
  ffi.Pointer<ffi.Void> dartApiData,
  ffi.Int64 callbackPort,
);

typedef _dart_port_audio_native_initialize = void Function(
  ffi.Pointer<ffi.Void> dartApiData,
  int callbackPort,
);

typedef _c_port_audio_native_terminate = ffi.Void Function();

typedef _dart_port_audio_native_terminate = void Function();

typedef _c_port_audio_native_get_default_input_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _dart_port_audio_native_get_default_input_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _c_port_audio_native_get_default_output_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _dart_port_audio_native_get_default_output_device
    = ffi.Pointer<NativeAudioDeviceInfo> Function();

typedef _c_port_audio_native_get_input_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _dart_port_audio_native_get_input_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _c_port_audio_native_get_output_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _dart_port_audio_native_get_output_device_list
    = ffi.Pointer<NativeAudioDeviceInfoList> Function();

typedef _c_port_audio_native_destroy_device_info = ffi.Void Function(
  ffi.Pointer<NativeAudioDeviceInfo> info,
);

typedef _dart_port_audio_native_destroy_device_info = void Function(
  ffi.Pointer<NativeAudioDeviceInfo> info,
);

typedef _c_port_audio_native_destroy_device_info_list = ffi.Void Function(
  ffi.Pointer<NativeAudioDeviceInfoList> list,
);

typedef _dart_port_audio_native_destroy_device_info_list = void Function(
  ffi.Pointer<NativeAudioDeviceInfoList> list,
);

typedef _c_port_audio_native_callback = ffi.Void Function(
  ffi.Int32 type,
  ffi.Pointer<ffi.Int8> callbackId,
  ffi.Int32 code,
  ffi.Pointer<ffi.Void> result,
);

typedef _dart_port_audio_native_callback = void Function(
  int type,
  ffi.Pointer<ffi.Int8> callbackId,
  int code,
  ffi.Pointer<ffi.Void> result,
);

typedef _c_port_audio_native_create_input_stream = ffi.Void Function(
  ffi.Int32 deviceIndex,
  ffi.Int64 nativePort,
  ffi.Int32 channelCount,
  ffi.Int32 sampleFormat,
  ffi.Double sampleRate,
  ffi.Int32 frameCountPerBuffer,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _dart_port_audio_native_create_input_stream = void Function(
  int deviceIndex,
  int nativePort,
  int channelCount,
  int sampleFormat,
  double sampleRate,
  int frameCountPerBuffer,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _c_port_audio_native_start_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _dart_port_audio_native_start_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _c_port_audio_native_stop_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _dart_port_audio_native_stop_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _c_port_audio_native_abort_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _dart_port_audio_native_abort_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _c_port_audio_native_destroy_input_stream = ffi.Void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);

typedef _dart_port_audio_native_destroy_input_stream = void Function(
  ffi.Pointer<NativeAudioStream> nativeStream,
  ffi.Pointer<ffi.Int8> callbackId,
);
